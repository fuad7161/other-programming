// light OJ problem .......

/*We define b is a Divisor of a number a if a is divisible by b. So, the divisors of 12 are 1, 2, 3, 4, 6, 12. So, 12 has 6 divisors.

Now you have to order all the integers from 1 to 1000. x will come before y if

1)                  number of divisors of x is less than number of divisors of y

2)                  number of divisors of x is equal to number of divisors of y and x > y.

Input
Input starts with an integer T (≤ 1005), denoting the number of test cases.

Each case contains an integer n (1 ≤ n ≤ 1000).

Output
For each case, print the case number and the nth number after ordering.

Sample Input
5

1

2

3

4

1000

Sample Output
Case 1: 1

Case 2: 997

Case 3: 991

Case 4: 983

Case 5: 840*/

//code in there

#include<bits/stdc++.h>
using namespace std;

char digits[100];
int NumDiv(int n)
 {
    int cnt=0;
    for(int i=1;i*i<=n; i++)
    {
        if(n%i==0)
        {
            if(i*i!=n)cnt+=2;
            else cnt++;
        }
    }
    return cnt;
 }

int ar[10000],b[10000];

void sic()
{
    for(int i=1;i<=1000;i++)
   {
        ar[i] = NumDiv(i);
   }
   for(int i=1,z=1;i<=1000;i++)
   {
        for(int j=1000;j>=i;j--)
        {
            if(i==ar[j])
            {
                b[z] = j;
                z++;
            }
        }
   }
}

int main() 
{
    int t,tc=1;
    cin>>t;
    while(tc<=t){
   int n;
   cin>>n;
   sic();
    cout<<"Case "<<tc<<": "<<b[n]<<endl;
    tc++;
   }
   return 0;
}
