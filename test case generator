import random
def randInt():
  n = (int)((random.random()) * 100000000000000000)
  return n;
def randStrSmall(n):
  small_str = 'abcdefghijklmnopqrstuvwxyz'
  ans = ''
  while n>0:
    pos = randInt()%26
    ans += small_str[pos]
    n-=1
  return ans
def randStrCapital(n):
  tem = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  ans = ''
  while n > 0:
    pos = randInt() % 26
    ans += tem[pos]
    n -= 1
  return ans
def randAny(have , len1):
  n = len(have)
  ans = ''
  while len1 > 0:
    val = randInt()//100
    ans += have[val%n]
    len1 -= 1
  return ans
def randArray(n , l , r):
  ar = []
  for i in range(n):
    val = (random.randint(l,r))
    ar.append(val)
  return ar
def fixed_N_arry(n , l , r):
  print(" ".join(str(i) for i in randArray(n , l , r)))
def N_and_N_size_array(N,L,R):
  if L==0:
    L = 1;
  n = randInt()%N;
  print(n)
  fixed_N_arry(n,L,R)
def case_N_N_size_array(case , N , L, R):
  for i in range(0, case):
    N_and_N_size_array(N, L, R)
def case_N_N_size_array_fixed(case , N , L, R):
  for i in range(0, case):
    print(N)
    fixed_N_arry(N, L, R)
def MatrixWithGivenChar(have , N):
  len1 = len(have)
  ans = []
  for i in range(N):
    tem = ''
    for j in range(N):
      pos = random.randint(0,100)%len1
      tem += have[pos]
    ans.append(tem)
  return ans
def PrintMatrinx(ans):
  for i in ans:
    for j in i:
      print(j, end='')
    print()
def case_N_Matrix_fixed(case , N,value):
  for i in range(case):
    ans = MatrixWithGivenChar(value , N)
    print(N)
    PrintMatrinx(ans)
def case_N_Matrix(case , N,value):
  for i in range(case):
    new_n = (randInt()%N)+1
    ans = MatrixWithGivenChar(value , new_n)
    print(new_n)
    PrintMatrinx(ans)
def case_N_string_small(case , n):
  for i in range(case):
    new_n = (randInt()%n)+1
    ans = randStrSmall(new_n)
    print(new_n)
    print(ans)
def case_N_string_small_fixed(case , n):
  for i in range(case):
    new_n = n
    ans = randStrSmall(new_n)
    print(new_n)
    print(ans)
def case_N_string_capital(case , n):
  for i in range(case):
    new_n = (randInt()%n)+1
    ans = randStrCapital(new_n)
    print(new_n)
    print(ans)
def case_N_string_capital_fixed(case , n):
  for i in range(case):
    new_n = n
    ans = randStrCapital(new_n)
    print(new_n)
    print(ans)
class DSU:
  def __init__(self, n):
    self.parent = [i for i in range(n)]

  def find(self, x):
    if self.parent[x] != x:
      self.parent[x] = self.find(self.parent[x])
    return self.parent[x]

  def union(self, x, y):
    x_root = self.find(x)
    y_root = self.find(y)
    self.parent[x_root] = y_root
def tree_input(n):
  ds = DSU(n+1)
  edge = n-1;
  ans = []
  while edge>0:
    while True:
      x = (randInt() % n) + 1;
      y = (randInt() % n) + 1;
      if ds.find(x) != ds.find(y):
        ds.union(x,y)
        ans.append({x,y})
        break
    edge -= 1
  return ans
def Print_tree(N):
  ans = tree_input(N)
  print(N)
  for [x,y] in ans:
    print(x,y)

"""
1. randInt()
2. randStrSmall(10)
3. randStrCapital(10)
4. randAny("10",10)
5. fixed_N_arry(10, 1, 10)
6. fixed_N_arry(10, 1, 10)
7. N_and_N_size_array(N,L,R)
8. case_N_N_size_array_fixed(case , N , L , R)
9. MatrixWithGivenChar("#.", 5)
10. case_N_Matrix_fixed(case , N , value)
11. case_N_Matrix(case , N , value)
12. case_N_string_small(5,5)
13. case_N_string_small_fixed(5,5)
14. case_N_string_capital(5,5)
15. case_N_string_capital_fixed(5,5)
16. Print_tree(6)
"""



Print_tree(5)
